{"version":3,"sources":["ToDoList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ToDoList","props","useState","title","setTitle","error","setError","addTask","trim","value","onChange","event","currentTarget","onKeyPress","e","charCode","className","onClick","tasks","map","task","key","id","isDone","type","newIsDoneValue","checked","changeTaskStatus","removeTask","filter","changeFilter","App","v1","setTasks","setFilter","tasksForToDoList","filteredTasks","newTasks","find","t","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.bb3a8c1f.chunk.js","sourcesContent":["import React, {ChangeEvent, useState} from \"react\";\r\nimport {FilterValueType} from \"./App\";\r\n\r\n\r\n// @ts-ignore\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (taskId: string) => void\r\n    changeFilter(value: FilterValueType): void\r\n    addTask: (title: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean) => void\r\n    filter:any\r\n}\r\n\r\n\r\ntype TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\n\r\nexport function ToDoList(props: PropsType) {\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error,setError]=useState<string|null>(null)\r\n\r\n\r\n\r\n    const addTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addTask(title)\r\n            setTitle(' ')\r\n        }else{\r\n            setError('Title is required')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(event.currentTarget.value)\r\n    }\r\n\r\n    const onAllClickHandler = () => {\r\n        props.changeFilter('All')\r\n    }\r\n\r\n    const onActiveClickHandler = () => {\r\n        props.changeFilter('Active')\r\n    }\r\n\r\n    const onCompletedHandler = () => {\r\n        props.changeFilter('Completed')\r\n    }\r\n\r\n    const onKeyPressHandler=(e:React.KeyboardEvent<HTMLInputElement>)=>{\r\n       setError(null);\r\n       if (e.charCode===13){\r\n           addTask();\r\n       }\r\n    }\r\n\r\n    return (<div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title}\r\n                       onChange={(event) => {\r\n                           setTitle(event.currentTarget.value)\r\n                       }}\r\n                       // onKeyPress={(event) => {\r\n                       //     if (event.key === 'Enter') {\r\n                       //         addTask()\r\n                       //     }\r\n                onKeyPress={onKeyPressHandler}\r\n                className={error?'error':''}\r\n\r\n                />\r\n                <button onClick={addTask}>+</button>\r\n\r\n                {error&&<div className={'error-message'}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {props.tasks.map((task) => {\r\n\r\n                    const onClickHandler = () => {\r\n                        props.removeTask(task.id)\r\n                    }\r\n\r\n                    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n                        let newIsDoneValue = e.currentTarget.checked;\r\n                        props.changeTaskStatus(task.id, newIsDoneValue)\r\n\r\n                    }\r\n\r\n                    return (\r\n\r\n                        <li key={task.id} className={task.isDone?'is-done':''}>\r\n                            <input type='checkbox' onChange={onChangeHandler} checked={task.isDone}/>\r\n                            <span>{task.title}</span>\r\n                            <button onClick={onClickHandler}>x</button>\r\n                        </li>\r\n                    )\r\n                })}\r\n\r\n            </ul>\r\n            <div>\r\n                <button className={props.filter==='All'?'active-filter':''} onClick={() => {\r\n                    onAllClickHandler()\r\n                }}>All\r\n                </button>\r\n                <button className={props.filter==='Active'?'active-filter':''} onClick={() => {\r\n                    onActiveClickHandler()\r\n                }}>Active\r\n                </button>\r\n                <button  className={props.filter==='Completed'?'active-filter':''} onClick={() => {\r\n                    onCompletedHandler()\r\n                }}>Completed\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {ToDoList} from \"./ToDoList\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type FilterValueType= 'All'|'Active'|'Completed'\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTasks] = useState( [\r\n        { id: v1(), title: \"HTML&CSS\", isDone: true },\r\n        { id: v1(), title: \"JS\", isDone: true },\r\n        { id: v1(), title: \"ReactJS\", isDone: false },\r\n        {id:v1(), title: \"Rest API\", isDone:false},\r\n        {id:v1(),title: \"GraphQL\",isDone: false},\r\n    ])\r\n\r\nfunction addTask (title:string){\r\n        let task={id:v1(),title:title,isDone:false};\r\n        let newTasks=[task,... tasks];\r\n        setTasks(newTasks)\r\n\r\n}\r\n    function removeTask(id:string){\r\n        let filteredTasks=tasks.filter(task=>task.id!=id)\r\n        setTasks(filteredTasks)\r\n    }\r\n\r\n\r\n    let [filter,setFilter]=useState <FilterValueType>('All')\r\n    let tasksForToDoList=tasks\r\n    if (filter==='Active'){\r\n        tasksForToDoList=tasks.filter(task=>!task.isDone)\r\n    }\r\n\r\n    if(filter==='Completed'){\r\n        tasksForToDoList=tasks.filter(task=>task.isDone)\r\n    }\r\nfunction changeFilter (value:FilterValueType){\r\n        setFilter(value)}\r\n\r\n    function changeStatus (id:string,isDone:boolean){\r\n            let task=tasks.find(t=>t.id===id);\r\n            if(task){\r\n                task.isDone=isDone;\r\n                setTasks([...tasks])\r\n            }\r\n\r\n\r\n}\r\n    return (\r\n        <div className=\"App\">\r\n            <ToDoList\r\n                title=\"What to learn\"\r\n              tasks={tasksForToDoList}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeTaskStatus={changeStatus}\r\n                filter={filter}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}